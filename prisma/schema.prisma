generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Region {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  User      User[]
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  ipAddress    String
  userAgent    String
  refreshToken String
  expiresAt    Int
  createdAt    DateTime @default(now())
}

enum userRole {
  ADMIN
  SUPERADMIN
  VIEWERADMIN
  JISMONIY
  YURIDIK
}

enum userStatus {
  ACTIVE
  INACTIVE
}

model User {
  id                   String     @id @default(uuid())
  firstName            String
  lastName             String
  middleName           String?
  phone                String
  password             String
  regionId             String
  userStatus           userStatus @default(INACTIVE)
  region               Region     @relation(fields: [regionId], references: [id])
  userRole             userRole
  TIN                  String?
  bankCode             String?
  bankAccountNumber    String?
  economicActivityCode String?
  bankName             String?
  orders               Order[]
  carts                Cart[]
  comments             Comment[]
  Session              Session[]
}

enum paymentStatus {
  PENDING
  PAID
  NOTPAID
  REFUSED
}

model Order {
  id                String        @id @default(uuid())
  userId            String
  user              User          @relation(fields: [userId], references: [id])
  cartId            String
  cart              Cart          @relation(fields: [cartId], references: [id])
  createdAt         DateTime      @default(now())
  location          String
  address           String
  paymentStatus     paymentStatus @default(PENDING)
  withDelivery      Boolean
  status            String
  commentToDelivery String?
  comments          Comment[]
}

model Comment {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  stars     Int
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Cart {
  id               String         @id @default(uuid())
  createdAt        DateTime       @default(now())
  userId           String
  user             User           @relation(fields: [userId], references: [id])
  isCompleted      Boolean        @default(false)
  masterCategoryId String
  masterCategory   MasterCategory @relation(fields: [masterCategoryId], references: [id])
  orders           Order[]
  cartItems        CartItem[]
}

model CartItem {
  id     String @id @default(uuid())
  cartId String
  cart   Cart   @relation(fields: [cartId], references: [id])
  toolId String
  tool   Tool   @relation(fields: [toolId], references: [id])
  count  Int
}

model Tool {
  id                String       @id @default(uuid())
  name_uz           String
  name_en           String
  name_ru           String
  desc_uz           String?
  desc_en           String?
  desc_ru           String?
  price             Float
  quantity          Int
  brand             String?
  isActive          Boolean      @default(true)
  image             String?
  toolSubCategoryId String
  toolSubCategory   ToolCategory @relation(fields: [toolSubCategoryId], references: [id])
  toolReviewId      String?
  cartItems         CartItem[]
  attributes        Attribute[]
}

model ToolCategory {
  id               String         @id @default(uuid())
  name_uz          String
  name_en          String
  name_ru          String
  desc_uz          String?
  desc_en          String?
  desc_ru          String?
  icon             String?
  tools            Tool[]
}

model Attribute {
  id          String @id @default(uuid())
  productId   String
  product     Tool   @relation(fields: [productId], references: [id])
  attributeId String
  value       String
}

model Master {
  id            String          @id @default(uuid())
  fullName      String
  phone         String
  isActive      Boolean         @default(true)
  dateBirth     String
  experience    Int
  image         String
  passportImage String
  star          Float?
  about         String
  MasterService MasterService[]
}

model MasterService {
  id               String         @id @default(uuid())
  masterCategoryId String
  masterCategory   MasterCategory @relation(fields: [masterCategoryId], references: [id])
  minWorkingHours  Int?
  priceHourly      Float?
  priceDaily       Float?
  experience       Int?
  masterId         String
  master           Master         @relation(fields: [masterId], references: [id])
}

model MasterCategory {
  id                    String          @id @default(uuid())
  name_uz               String
  name_en               String
  name_ru               String
  icon                  String
  minWorkingHourlyPrice Float
  minPriceDaily         Float
  carts                 Cart[]
  MasterService         MasterService[]
  Level                 Level[]
}

model Level {
  id               String         @id @default(uuid())
  name_uz          String
  name_en          String
  name_ru          String
  masterCategoryId String?
  masterCategory   MasterCategory? @relation(fields: [masterCategoryId], references: [id])
}
